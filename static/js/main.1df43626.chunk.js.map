{"version":3,"sources":["images/gear.png","images/3526768.jpg","images/check-mark.svg","images/instaicon.svg","images/twittericon.svg","images/fbookicon.svg","images/youtubeicon.svg","components/Logo.js","components/Title.js","components/Notification.js","components/Description.js","components/Links.js","components/Countdown.js","components/ComingSoon.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","_ref","alt","src","spinSpeed","react_default","a","createElement","className","concat","Title","text","Notification","level","visible","message","Description","components_Notification","Links","links","map","link","i","key","target","rel","href","url","type","data","logo","Countdown","countdownDate","_useState","useState","days","hours","mins","secs","_useState2","Object","slicedToArray","state","setState","setCountdown","futureDate","moment","today","clockDuration","duration","diff","Math","floor","asDays","minutes","seconds","useInterval","useEffect","keys","value","String","length","addZeros","toUpperCase","ComingSoon","countdown","title","description","instagram","twitter","notification","configureNotification","obj","objectSpread","_this","body","msg","status","check","xmark","showNotification","setTimeout","changeLogoSpeed","_this$state","this","components_Countdown","components_Logo","components_Title","components_Description","components_Links","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_ComingSoon","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1df43626.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gear.e250a0b5.png\";","module.exports = __webpack_public_path__ + \"static/media/3526768.0da91477.jpg\";","module.exports = __webpack_public_path__ + \"static/media/check-mark.d4e90b4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/instaicon.906266bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/twittericon.3137fd49.svg\";","module.exports = __webpack_public_path__ + \"static/media/fbookicon.3c9ad1a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtubeicon.a274ef32.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/Logo.css\";\n\nconst Logo = ({ alt, src, spinSpeed }) => (\n  <div className={`logo-container ${spinSpeed}`}>\n    <img className=\"logo\" alt={alt} src={src} />\n  </div>\n);\n\nLogo.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  spinSpeed: PropTypes.string.isRequired\n};\nexport default Logo;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/Title.css\";\n\nconst Title = ({ text }) => <h1 className=\"title\">{text}</h1>;\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nexport default Title;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/Notification.css\";\n\nconst Notification = ({ level, visible, src, alt, message }) => (\n  <div className={`notification ${level}${visible ? \" visible\" : \"\"}`}>\n    <img src={src} alt={alt} />\n    <p>{message}</p>\n  </div>\n);\n\nNotification.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n  visible: PropTypes.bool.isRequired,\n  level: PropTypes.string.isRequired\n};\n\nexport default Notification;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Notification from \"./Notification\";\n\nimport \"../styles/Description.css\";\n\nconst Description = ({ text, src, alt, message, visible, level }) => (\n  <div className=\"description\">\n    <p className=\"description-text\">{text}</p>\n    <Notification\n      src={src}\n      alt={alt}\n      message={message}\n      visible={visible}\n      level={level}\n    />\n  </div>\n);\n\nDescription.propTypes = {\n  text: PropTypes.string.isRequired,\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n  visible: PropTypes.bool.isRequired,\n  level: PropTypes.string.isRequired\n};\n\nexport default Description;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/Links.css\";\n\nconst Links = ({ links }) => (\n  <div className=\"social-links\">\n    {links.map((link, i) => {\n      return (\n        <a\n          className=\"social-link\"\n          key={i}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={link.url}\n        >\n          <object className=\"social-logo\" type=\"image/svg+xml\" data={link.logo}>\n            {link.text}\n          </object>\n          <span className=\"social-text\">{link.text}</span>\n        </a>\n      );\n    })}\n  </div>\n);\n\nLinks.propTypes = {\n  links: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string.isRequired,\n      logo: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired\n    })\n  ).isRequired\n};\nexport default Links;","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment, { duration } from \"moment\";\nimport useInterval from \"react-useinterval\";\n\nimport \"../styles/Countdown.css\";\n\nconst Countdown = ({ countdownDate }) => {\n  const [state, setState] = useState({\n    days: 0,\n    hours: 0,\n    mins: 0,\n    secs: 0\n  });\n\n  const addZeros = value => {\n    value = String(value);\n    while (value.length < 2) {\n      value = `0${value}`;\n    }\n    return value;\n  };\n\n  const setCountdown = () => {\n    const futureDate = moment(countdownDate);\n\n    const today = moment();\n\n    const clockDuration = duration(futureDate.diff(today));\n\n    const days = Math.floor(clockDuration.asDays());\n    const hours = clockDuration.hours();\n    const mins = clockDuration.minutes();\n    const secs = clockDuration.seconds();\n\n    setState({\n      days,\n      hours,\n      mins,\n      secs\n    });\n  };\n\n  useInterval(() => {\n    setCountdown();\n  }, 1000);\n\n  useEffect(() => {\n    setCountdown();\n  });\n\n  return (\n    <div className=\"countdown\">\n      {Object.keys(state).map((key, i) => (\n        <div key={i} className=\"countdown-segment\">\n          <span className=\"countdown-segment-number\">\n            {addZeros(state[key])}\n          </span>\n          <span className=\"countdown-segment-caption\">{key.toUpperCase()}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nCountdown.propTypes = {\n  countdownDate: PropTypes.string.isRequired\n};\n\nexport default Countdown;\n","import React, { Component } from \"react\";\nimport Logo from \"./Logo\";\nimport Title from \"./Title\";\nimport Description from \"./Description\";\nimport Links from \"./Links\";\nimport Countdown from \"./Countdown\";\nimport Subscribe from \"./Subscribe\";\n// import logo from \"../images/gear-with-holes.svg\";\nimport logo from \"../images/gear.png\";\n// import xmark from \"../images/x-mark.svg\";\nimport xmark from \"../images/3526768.jpg\";\nimport check from \"../images/check-mark.svg\";\nimport facebook from \"../images/fbookicon.svg\";\nimport instagram from \"../images/instaicon.svg\";\n// import instagram from \"../images/instagram.png\";\nimport youtube from \"../images/youtubeicon.svg\";\nimport twitter from \"../images/twittericon.svg\";\n// import twitter from \"../images/twitter.png\";\nimport \"../styles/ComingSoon.css\";\n\nclass ComingSoon extends Component {\n  state = {\n    countdown: {\n      countdownDate: \"2020-3-20 00:00:00\"\n    },\n    logo: {\n      alt: \"Spinning Gear\",\n      src: logo,\n      spinSpeed: \"slow\"\n    },\n    title: {\n      text: \"Sorry this website is under maintenance!\"\n    },\n    description: {\n      text:\n        \"#TenangDiaMasihDiBumi\"\n    },\n    // subscribe: {\n    //   placeholder: \"Type here for your suggestion\",\n    //   buttonText: \"Submit\"\n    // },\n    links: [\n      // {\n      //   url: \"https://www.facebook.com/groups/CodingFromNull\",\n      //   logo: facebook,\n      //   text: \"Join\"\n      // },\n      {\n        url: \"https://www.instagram.com/_temuin/\",\n        logo: instagram,\n        text: \"Follow\"\n      },\n      // {\n      //   url: \"https://www.youtube.com/channel/UC9Psp9-p9jgHfDBReAAcZ3w\",\n      //   logo: youtube,\n      //   text: \"Watch\"\n      // },\n      {\n        url: \" https://twitter.com/_temuin\",\n        logo: twitter,\n        text: \"Tweet\"\n      }\n    ],\n    notification: {\n      src: \"\",\n      alt: \"\",\n      message: \"\",\n      visible: false,\n      level: \"\"\n    }\n  };\n\n  configureNotification = obj => {\n    const notification = { ...this.state.notification };\n    notification.message = obj.body.msg;\n    if (obj.status === 200) {\n      notification.src = check\n      notification.alt = \"Check Mark\"\n      notification.level = \"success\"\n    } else {\n      notification.src = xmark\n      notification.alt = \"X Mark\"\n      notification.level = \"error\"\n    }\n    this.setState({ notification });\n  };\n\n  showNotification = () => {\n    const notification = { ...this.state.notification };\n    notification.visible = true;\n    this.setState({ notification }, () => {\n      setTimeout(() => {\n        notification.visible = false;\n        this.setState({ notification });\n      }, 3000);\n    });\n  };\n\n  changeLogoSpeed = () => {\n    const logo = { ...this.state.logo };\n    logo.spinSpeed = \"fast\";\n    this.setState({ logo }, () => {\n      setTimeout(() => {\n        logo.spinSpeed = \"slow\";\n        this.setState({ logo });\n      }, 1000);\n    });\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      logo,\n      // subscribe,\n      links,\n      countdown,\n      notification\n    } = this.state;\n\n    return (\n      <div className=\"background\">\n        <Countdown countdownDate={countdown.countdownDate} />\n        <Logo alt={logo.alt} src={logo.src} spinSpeed={logo.spinSpeed} />\n        <Title text={title.text} />\n        <Description\n          text={description.text}\n          src={notification.src}\n          alt={notification.alt}\n          message={notification.message}\n          visible={notification.visible}\n          level={notification.level}\n        />\n        {/* <Subscribe\n          placeholder={subscribe.placeholder}\n          buttonText={subscribe.buttonText}\n          changeLogoSpeed={this.changeLogoSpeed}\n          configureNotification={this.configureNotification}\n          showNotification={this.showNotification}\n        /> */}\n        <Links links={links} />\n      </div>\n    );\n  }\n}\n\nexport default ComingSoon;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport ComingSoon from \"./components/ComingSoon\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<ComingSoon />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}